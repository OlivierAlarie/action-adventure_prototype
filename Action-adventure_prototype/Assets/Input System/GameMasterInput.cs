//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input System/GameMasterInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameMasterInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameMasterInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameMasterInput"",
    ""maps"": [
        {
            ""name"": ""GameMasterControls"",
            ""id"": ""f2636e1f-9d2a-491a-928b-18cfda52aa3e"",
            ""actions"": [
                {
                    ""name"": ""SwitchWorld"",
                    ""type"": ""Button"",
                    ""id"": ""7d10aabf-9299-41ad-b2a5-a53a27ecc391"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""9d6098ff-6981-4131-af87-3883f9c1c58d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""67002807-7dc7-45e0-91e9-abffc797d84d"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWorld"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17905441-7f83-456b-847d-a41a232d9a18"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWorld"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac750477-5d3c-4739-bba6-0581ad184c34"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7883d2a9-7dc3-4a7b-94dc-828d982507a8"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameMasterControls
        m_GameMasterControls = asset.FindActionMap("GameMasterControls", throwIfNotFound: true);
        m_GameMasterControls_SwitchWorld = m_GameMasterControls.FindAction("SwitchWorld", throwIfNotFound: true);
        m_GameMasterControls_Pause = m_GameMasterControls.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameMasterControls
    private readonly InputActionMap m_GameMasterControls;
    private IGameMasterControlsActions m_GameMasterControlsActionsCallbackInterface;
    private readonly InputAction m_GameMasterControls_SwitchWorld;
    private readonly InputAction m_GameMasterControls_Pause;
    public struct GameMasterControlsActions
    {
        private @GameMasterInput m_Wrapper;
        public GameMasterControlsActions(@GameMasterInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchWorld => m_Wrapper.m_GameMasterControls_SwitchWorld;
        public InputAction @Pause => m_Wrapper.m_GameMasterControls_Pause;
        public InputActionMap Get() { return m_Wrapper.m_GameMasterControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameMasterControlsActions set) { return set.Get(); }
        public void SetCallbacks(IGameMasterControlsActions instance)
        {
            if (m_Wrapper.m_GameMasterControlsActionsCallbackInterface != null)
            {
                @SwitchWorld.started -= m_Wrapper.m_GameMasterControlsActionsCallbackInterface.OnSwitchWorld;
                @SwitchWorld.performed -= m_Wrapper.m_GameMasterControlsActionsCallbackInterface.OnSwitchWorld;
                @SwitchWorld.canceled -= m_Wrapper.m_GameMasterControlsActionsCallbackInterface.OnSwitchWorld;
                @Pause.started -= m_Wrapper.m_GameMasterControlsActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_GameMasterControlsActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_GameMasterControlsActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_GameMasterControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SwitchWorld.started += instance.OnSwitchWorld;
                @SwitchWorld.performed += instance.OnSwitchWorld;
                @SwitchWorld.canceled += instance.OnSwitchWorld;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public GameMasterControlsActions @GameMasterControls => new GameMasterControlsActions(this);
    public interface IGameMasterControlsActions
    {
        void OnSwitchWorld(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
